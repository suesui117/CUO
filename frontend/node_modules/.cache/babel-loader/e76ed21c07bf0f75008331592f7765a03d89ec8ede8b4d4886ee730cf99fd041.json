{"ast":null,"code":"var _jsxFileName = \"/Users/sue/Desktop/todo-app/frontend/src/components/TodoApp.js\",\n  _s = $RefreshSig$();\n/* useStage + localStorage */\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction TodoApp() {\n  _s();\n  const [todos, setTodos] = useState([]);\n  const [user, setUser] = useState('');\n\n  // Load user and tasks from localStorage\n  const loadFromLocalStorage = () => {\n    const savedUser = localStorage.getItem('user');\n    // Load tasks for the saved user, or an empty array if no tasks are found\n    const savedTodos = savedUser ? JSON.parse(localStorage.getItem(savedUser)) || [] : [];\n    return {\n      savedUser,\n      savedTodos\n    };\n  };\n  useEffect(() => {\n    const {\n      savedUser,\n      savedTodos\n    } = loadFromLocalStorage();\n    setUser(savedUser); // Set the user if there's a saved user\n    setTodos(savedTodos); // Set the tasks for that user\n  }, []);\n\n  // Add a task\n  const addTodo = () => {\n    const newTask = document.getElementById('taskInput').value;\n    if (newTask) {\n      const updatedTodos = [...todos, {\n        task: newTask,\n        completed: false\n      }];\n      setTodos(updatedTodos);\n      localStorage.setItem(user, JSON.stringify(updatedTodos)); // Save tasks under user's name\n      document.getElementById('taskInput').value = ''; // Clear input field\n    }\n  };\n\n  // Delete a task\n  const deleteTodo = taskToDelete => {\n    const updatedTodos = todos.filter(todo => todo.task !== taskToDelete);\n    setTodos(updatedTodos);\n    localStorage.setItem(user, JSON.stringify(updatedTodos)); // Update tasks in localStorage\n  };\n\n  // Toggle task completion (cross out)\n  const toggleComplete = taskToToggle => {\n    const updatedTodos = todos.map(todo => todo.task === taskToToggle ? {\n      ...todo,\n      completed: !todo.completed\n    } : todo);\n    setTodos(updatedTodos);\n    localStorage.setItem(user, JSON.stringify(updatedTodos)); // Update tasks in localStorage\n  };\n\n  // Login function\n  //   const login = () => {\n  //     const username = document.getElementById('usernameInput').value;\n  //     if (username) {\n  //       localStorage.setItem('user', username); // Save the username\n  //       setUser(username);  // Set the user in state\n  //       const { savedTodos } = loadFromLocalStorage(); // Load saved tasks for the user\n  //       setTodos(savedTodos); // Set tasks for that user\n  //     }\n  //   };\n\n  const login = () => {\n    const username = document.getElementById('usernameInput').value;\n    if (username) {\n      // This is the string check\n      localStorage.setItem('user', username); // Save the username\n      setUser(username); // Set the user in state\n      const {\n        savedTodos\n      } = loadFromLocalStorage(); // Load saved tasks for the user\n      setTodos(savedTodos); // Set tasks for that user\n    } else {\n      alert(\"Please enter a username\"); // If no username is provided, show an alert\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('user'); // Remove the user from localStorage\n    setUser(''); // Clear the user in state\n    // Do not clear tasks in localStorage to persist them\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Todo App\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), !user ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"usernameInput\",\n        type: \"text\",\n        placeholder: \"Enter username\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: login,\n        children: \"Log In\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Welcome, \", user, \"!\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: logout,\n        children: \"Log Out\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), user && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        id: \"taskInput\",\n        type: \"text\",\n        placeholder: \"Enter a new task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: addTodo,\n        children: \"Add Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: todos.map((todo, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          style: {\n            textDecoration: todo.completed ? 'line-through' : 'none'\n          },\n          children: [todo.task, /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => toggleComplete(todo.task),\n            children: todo.completed ? 'Undo' : 'Complete'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => deleteTodo(todo.task),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 17\n          }, this)]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(TodoApp, \"6wQx1sR45Q0iCDB/1/mGRPUpCDM=\");\n_c = TodoApp;\nexport default TodoApp;\n\n/* using only useState*/\n// import React, { useState } from 'react';\n\n// function App() {\n//   const [user, setUser] = useState(null);  // For storing logged-in user\n//   const [todos, setTodos] = useState([]);  // For storing todo list in memory\n//   const [taskInput, setTaskInput] = useState('');  // For storing task input\n\n//   // Login function\n//   const login = (username) => {\n//     setUser(username);  // Set logged-in user in React state\n//   };\n\n//   // Logout function\n//   const logout = () => {\n//     setUser(null);  // Clear user state on logout\n//   };\n\n//   // Add Todo task\n//   const addTodo = (task) => {\n//     const newTodo = {\n//       id: Date.now(),  // unique id\n//       task: task,\n//       completed: false,\n//     };\n//     setTodos([...todos, newTodo]);  // Update todos in React state\n//   };\n\n//   // Toggle completion of a task\n//   const toggleCompletion = (id) => {\n//     const updatedTodos = todos.map(todo =>\n//       todo.id === id ? { ...todo, completed: !todo.completed } : todo\n//     );\n//     setTodos(updatedTodos);  // Update todos in React state\n//   };\n\n//   // Delete a task\n//   const deleteTodo = (id) => {\n//     const updatedTodos = todos.filter(todo => todo.id !== id);\n//     setTodos(updatedTodos);  // Update todos in React state\n//   };\n\n//   return (\n//     <div>\n//       <h1>Todo App</h1>\n\n//       {/* Login form */}\n//       {!user ? (\n//         <div>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter username\"\n//             onChange={(e) => setTaskInput(e.target.value)}\n//           />\n//           <button onClick={() => login(taskInput)}>Log In</button>\n//         </div>\n//       ) : (\n//         <div>\n//           <p>Welcome, {user}!</p>\n//           <button onClick={logout}>Log Out</button>\n//         </div>\n//       )}\n\n//       {/* Todo input and tasks */}\n//       {user && (\n//         <>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter a new task\"\n//             value={taskInput}\n//             onChange={(e) => setTaskInput(e.target.value)}\n//             onKeyDown={(e) => e.key === 'Enter' && addTodo(taskInput)}\n//           />\n//           <ul>\n//             {todos.map(todo => (\n//               <li key={todo.id}>\n//                 <span style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}>\n//                   {todo.task}\n//                 </span>\n//                 <button onClick={() => toggleCompletion(todo.id)}>\n//                   {todo.completed ? 'Undo' : 'Complete'}\n//                 </button>\n//                 <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n//               </li>\n//             ))}\n//           </ul>\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n//localStorage\nvar _c;\n$RefreshReg$(_c, \"TodoApp\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","TodoApp","_s","todos","setTodos","user","setUser","loadFromLocalStorage","savedUser","localStorage","getItem","savedTodos","JSON","parse","addTodo","newTask","document","getElementById","value","updatedTodos","task","completed","setItem","stringify","deleteTodo","taskToDelete","filter","todo","toggleComplete","taskToToggle","map","login","username","alert","logout","removeItem","children","fileName","_jsxFileName","lineNumber","columnNumber","id","type","placeholder","onClick","index","style","textDecoration","_c","$RefreshReg$"],"sources":["/Users/sue/Desktop/todo-app/frontend/src/components/TodoApp.js"],"sourcesContent":["/* useStage + localStorage */\nimport React, { useEffect, useState } from 'react';\n\nfunction TodoApp() {\n  const [todos, setTodos] = useState([]);\n  const [user, setUser] = useState('');\n\n  // Load user and tasks from localStorage\n  const loadFromLocalStorage = () => {\n    const savedUser = localStorage.getItem('user');\n    // Load tasks for the saved user, or an empty array if no tasks are found\n    const savedTodos = savedUser ? JSON.parse(localStorage.getItem(savedUser)) || [] : [];\n    return { savedUser, savedTodos };\n  };\n\n  useEffect(() => {\n    const { savedUser, savedTodos } = loadFromLocalStorage();\n    setUser(savedUser);  // Set the user if there's a saved user\n    setTodos(savedTodos);  // Set the tasks for that user\n  }, []);\n\n  // Add a task\n  const addTodo = () => {\n    const newTask = document.getElementById('taskInput').value;\n    if (newTask) {\n      const updatedTodos = [...todos, { task: newTask, completed: false }];\n      setTodos(updatedTodos);\n      localStorage.setItem(user, JSON.stringify(updatedTodos)); // Save tasks under user's name\n      document.getElementById('taskInput').value = ''; // Clear input field\n    }\n  };\n\n  // Delete a task\n  const deleteTodo = (taskToDelete) => {\n    const updatedTodos = todos.filter(todo => todo.task !== taskToDelete);\n    setTodos(updatedTodos);\n    localStorage.setItem(user, JSON.stringify(updatedTodos)); // Update tasks in localStorage\n  };\n\n  // Toggle task completion (cross out)\n  const toggleComplete = (taskToToggle) => {\n    const updatedTodos = todos.map(todo =>\n      todo.task === taskToToggle\n        ? { ...todo, completed: !todo.completed }\n        : todo\n    );\n    setTodos(updatedTodos);\n    localStorage.setItem(user, JSON.stringify(updatedTodos)); // Update tasks in localStorage\n  };\n\n  // Login function\n//   const login = () => {\n//     const username = document.getElementById('usernameInput').value;\n//     if (username) {\n//       localStorage.setItem('user', username); // Save the username\n//       setUser(username);  // Set the user in state\n//       const { savedTodos } = loadFromLocalStorage(); // Load saved tasks for the user\n//       setTodos(savedTodos); // Set tasks for that user\n//     }\n//   };\n\nconst login = () => {\n    const username = document.getElementById('usernameInput').value;\n    if (username) {  // This is the string check\n      localStorage.setItem('user', username); // Save the username\n      setUser(username);  // Set the user in state\n      const { savedTodos } = loadFromLocalStorage(); // Load saved tasks for the user\n      setTodos(savedTodos); // Set tasks for that user\n    } else {\n      alert(\"Please enter a username\"); // If no username is provided, show an alert\n    }\n  };\n\n  // Logout function\n  const logout = () => {\n    localStorage.removeItem('user');  // Remove the user from localStorage\n    setUser('');  // Clear the user in state\n    // Do not clear tasks in localStorage to persist them\n  };\n\n  return (\n    <div>\n      <h1>Todo App</h1>\n      {!user ? (\n        <div>\n          <input id=\"usernameInput\" type=\"text\" placeholder=\"Enter username\" />\n          <button onClick={login}>Log In</button>\n        </div>\n      ) : (\n        <div>\n          <p>Welcome, {user}!</p>\n          <button onClick={logout}>Log Out</button>\n        </div>\n      )}\n\n      {/* Todo input and tasks */}\n      {user && (\n        <>\n          <input id=\"taskInput\" type=\"text\" placeholder=\"Enter a new task\" />\n          <button onClick={addTodo}>Add Task</button>\n          <ul>\n            {todos.map((todo, index) => (\n              <li\n                key={index}\n                style={{\n                  textDecoration: todo.completed ? 'line-through' : 'none',\n                }}\n              >\n                {todo.task}\n                <button onClick={() => toggleComplete(todo.task)}>\n                  {todo.completed ? 'Undo' : 'Complete'}\n                </button>\n                <button onClick={() => deleteTodo(todo.task)}>Delete</button>\n              </li>\n            ))}\n          </ul>\n        </>\n      )}\n    </div>\n  );\n}\n\nexport default TodoApp;\n\n\n\n\n\n\n/* using only useState*/\n// import React, { useState } from 'react';\n\n// function App() {\n//   const [user, setUser] = useState(null);  // For storing logged-in user\n//   const [todos, setTodos] = useState([]);  // For storing todo list in memory\n//   const [taskInput, setTaskInput] = useState('');  // For storing task input\n\n//   // Login function\n//   const login = (username) => {\n//     setUser(username);  // Set logged-in user in React state\n//   };\n\n//   // Logout function\n//   const logout = () => {\n//     setUser(null);  // Clear user state on logout\n//   };\n\n//   // Add Todo task\n//   const addTodo = (task) => {\n//     const newTodo = {\n//       id: Date.now(),  // unique id\n//       task: task,\n//       completed: false,\n//     };\n//     setTodos([...todos, newTodo]);  // Update todos in React state\n//   };\n\n//   // Toggle completion of a task\n//   const toggleCompletion = (id) => {\n//     const updatedTodos = todos.map(todo =>\n//       todo.id === id ? { ...todo, completed: !todo.completed } : todo\n//     );\n//     setTodos(updatedTodos);  // Update todos in React state\n//   };\n\n//   // Delete a task\n//   const deleteTodo = (id) => {\n//     const updatedTodos = todos.filter(todo => todo.id !== id);\n//     setTodos(updatedTodos);  // Update todos in React state\n//   };\n\n//   return (\n//     <div>\n//       <h1>Todo App</h1>\n\n//       {/* Login form */}\n//       {!user ? (\n//         <div>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter username\"\n//             onChange={(e) => setTaskInput(e.target.value)}\n//           />\n//           <button onClick={() => login(taskInput)}>Log In</button>\n//         </div>\n//       ) : (\n//         <div>\n//           <p>Welcome, {user}!</p>\n//           <button onClick={logout}>Log Out</button>\n//         </div>\n//       )}\n\n//       {/* Todo input and tasks */}\n//       {user && (\n//         <>\n//           <input\n//             type=\"text\"\n//             placeholder=\"Enter a new task\"\n//             value={taskInput}\n//             onChange={(e) => setTaskInput(e.target.value)}\n//             onKeyDown={(e) => e.key === 'Enter' && addTodo(taskInput)}\n//           />\n//           <ul>\n//             {todos.map(todo => (\n//               <li key={todo.id}>\n//                 <span style={{ textDecoration: todo.completed ? 'line-through' : 'none' }}>\n//                   {todo.task}\n//                 </span>\n//                 <button onClick={() => toggleCompletion(todo.id)}>\n//                   {todo.completed ? 'Undo' : 'Complete'}\n//                 </button>\n//                 <button onClick={() => deleteTodo(todo.id)}>Delete</button>\n//               </li>\n//             ))}\n//           </ul>\n//         </>\n//       )}\n//     </div>\n//   );\n// }\n\n// export default App;\n\n\n\n\n\n//localStorage\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}